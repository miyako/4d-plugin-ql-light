/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-QL.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : QL
 #	author : miyako
 #	2019/12/01
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-QL.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- QL
            
			case 1 :
				QL_Create_thumbnail(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

#if CGFLOAT_IS_DOUBLE
#define NUMBER_TYPE kCFNumberDoubleType
#else
#define NUMBER_TYPE kCFNumberFloatType
#endif

CFURLRef copyPathURL(PA_Unistring *str) {
    
    if(str)
    {
        CFStringRef path = CFStringCreateWithCharacters(kCFAllocatorDefault, (const UniChar *)str->fString, (CFIndex)str->fLength);
        if(path)
        {
            return CFURLCreateWithFileSystemPath(kCFAllocatorDefault, path, kCFURLHFSPathStyle, false);
        }
    }
    
    return nil;
}

CFDictionaryRef copyOptions(PA_Unistring *str) {
    
    CFMutableDictionaryRef options = CFDictionaryCreateMutable(kCFAllocatorDefault,
                                                                                                                         0,
                                                                                                                         &kCFTypeDictionaryKeyCallBacks,
                                                                                                                         &kCFTypeDictionaryValueCallBacks);
    if(options)
    {
        if(str)
        {
            CFStringRef s = CFStringCreateWithCharacters(kCFAllocatorDefault,
                                                            (const UniChar *)str->fString,
                                                            str->fLength);
            std::string json;
            if(s)
            {
                size_t size = CFStringGetMaximumSizeForEncoding(CFStringGetLength(s),
                                                            kCFStringEncodingUTF8) + sizeof(uint8_t);
                std::vector<uint8_t> buf(size);
                CFIndex len = 0;
                CFStringGetBytes(s,
                                 CFRangeMake(0,
                                             CFStringGetLength(s)),
                                 kCFStringEncodingUTF8,
                                 0,
                                 true,
                                 (UInt8 *)&buf[0], size, &len);
                json = std::string((const char *)&buf[0], len);
                CFRelease(s);
            }
            
            Json::Value root;
            Json::CharReaderBuilder builder;
            std::string errors;

            Json::CharReader *reader = builder.newCharReader();
            bool parse = reader->parse(json.c_str(),
                                       json.c_str() + json.length(),
                                       &root,
                                       &errors);
            if(parse)
            {
                if(root.isObject())
                {
                    for(Json::Value::const_iterator it = root.begin() ; it != root.end() ; it++)
                    {
                        if(it->isString())
                        {
                            JSONCPP_STRING name = it.name();

                            NSString *_name = [NSString stringWithUTF8String:(const char *)name.c_str()];
                            
                            if(it->isNumeric())
                            {
                                double doubleValue = it->asDouble();
                                if(name == "scaleFactor")
                                {
                                    CFNumberRef scaleFactor = CFNumberCreate(kCFAllocatorDefault,
                                                                             kCFNumberDoubleType,
                                                                             &doubleValue);
                                    if(scaleFactor)
                                    {
                                        CFDictionarySetValue(options, (CFStringRef)_name, scaleFactor);
                                        CFRelease(scaleFactor);
                                    }
                                }else
                                
                                if(name == "width")
                                {
                                    CFNumberRef width = CFNumberCreate(kCFAllocatorDefault,
                                                                                 kCFNumberDoubleType,
                                                                                 &doubleValue);
                                        if(width)
                                        {
                                            CFDictionarySetValue(options, (CFStringRef)_name, width);
                                            CFRelease(width);
                                        }
                                }else
                                
                                if(name == "height")
                                {
                                    CFNumberRef height = CFNumberCreate(kCFAllocatorDefault,
                                                                                 kCFNumberDoubleType,
                                                                                 &doubleValue);
                                        if(height)
                                        {
                                            CFDictionarySetValue(options, (CFStringRef)_name, height);
                                            CFRelease(height);
                                        }
                                }
                            }else
                                
                            if(it->isString())
                            {
                                JSONCPP_STRING stringValue = it->asString();
                                
                                NSString *_value = [NSString stringWithUTF8String:(const char *)stringValue.c_str()];
                                
                                CFDictionarySetValue(options, (CFStringRef)_name, (CFStringRef)_value);
                            }
                        }
                    }
                }
            }
        }
    }
                                    
    return options;
}

void QL_Create_thumbnail(PA_PluginParameters params) {
        
    CFURLRef url = copyPathURL(PA_GetStringParameter(params, 1));

    if(url)
    {
        CFDictionaryRef options = copyOptions(PA_GetStringParameter(params, 2));
        if(options)
        {
            CGSize maxSize = CGSizeMake(1024, 1024);
            CFNumberRef doubleValue;
            if(CFDictionaryGetValueIfPresent(options, CFSTR("width"), (const void **)&doubleValue))
            {
                CGFloat w;
                if(CFNumberGetValue(doubleValue, NUMBER_TYPE, &w))
                {
                    maxSize.width = w;
                }
            }
            
            if(CFDictionaryGetValueIfPresent(options, CFSTR("height"), (const void **)&doubleValue))
            {
                CGFloat h;
                if(CFNumberGetValue(doubleValue, NUMBER_TYPE, &h))
                {
                    maxSize.height = h;
                }
            }

            CGImageRef image = QLThumbnailImageCreate(kCFAllocatorDefault, url, maxSize, options);
            
            if(image)
            {
                CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
                CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
                CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
                
                CGImageDestinationAddImage(destination, image, properties);
                CGImageDestinationFinalize(destination);

                PA_ReturnPicture(params,
                                 PA_CreatePicture((void *)CFDataGetBytePtr(data), (PA_long32)CFDataGetLength(data)));
                
                CFRelease(properties);
                CFRelease(destination);
                CFRelease(data);
    
                CGImageRelease(image);
            }else
            {
                NSString *path = (NSString *)CFURLCopyFileSystemPath(url, kCFURLPOSIXPathStyle);
                if(path)
                {
                    NSImage *image = [[NSWorkspace sharedWorkspace]iconForFile:path];
                    //will be 1024x1024
                    [image setSize:NSMakeSize(maxSize.width, maxSize.height)];
                    NSData *data = [image TIFFRepresentation];
                    
                    PA_ReturnPicture(params, PA_CreatePicture((void *)[data bytes], (PA_long32)[data length]));
                    [path release];
                }
        
            }
            
            CFRelease(options);
        }
        CFRelease(url);
    }
}
